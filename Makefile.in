#!__BASH__

##################################################
# Make config
##################################################
.SUFFIXES: # Clear all suffix-based implicit rules
.DELETE_ON_ERROR:
SHELL							:= __BASH__
.DEFAULT_GOAL			:= all

##################################################
# Application information
##################################################
export APP_AUTHOR_NAME				= __APP_AUTHOR_NAME__
export APP_AUTHOR_ID					= __APP_AUTHOR_ID__
export APP_AUTHOR_EMAIL				= __APP_AUTHOR_EMAIL__
export APP_AUTHOR_HOME_URL		= __APP_AUTHOR_HOME_URL__
export APP_NAME								= __APP_NAME__
export APP_ID									= __APP_ID__
export APP_PRETTY_NAME				= __APP_PRETTY_NAME__
export APP_VERSION						= __APP_VERSION__
export APP_VVERSION						= __APP_VVERSION__
export APP_REPO_TYPE					= __APP_REPO_TYPE__
export APP_REPO_URL						= __APP_REPO_URL__
export APP_HOME_URL						= __APP_HOME_URL__
export APP_DOCUMENTATION_URL	= __APP_DOCUMENTATION_URL__
export APP_BUG_REPORT_url			= __APP_BUG_REPORT_URL__
export APP_SUPPORT_URL				= __APP_SUPPORT_URL__

##################################################
# Program name transformation
##################################################
export PROGRAM_NAME = __PROGRAM_NAME__

##################################################
# Build directories
##################################################
export BUILDROOTDIR			= __BUILDROOTDIR__
export BUILDROOTDIR_ABS	= __BUILDROOTDIR_ABS__
export SRCROOTDIR				= __SRCROOTDIR__
export SRCROOTDIR_ABS		= __SRCROOTDIR_ABS__
export SRCDIR						= $(SRCROOTDIR)/src
export SRCDIR_ABS				= $(SRCROOTDIR_ABS)/src
export BUILDIR					= __BUILDIR__
export BUILDIR_ABS			= __BUILDIR_ABS__
export DISTDIR					= __DISTDIR__
export DISTDIR_ABS			= __DISTDIR_ABS__

##################################################
# Installation directories
##################################################
export prefix							= __prefix__
export exec_prefix				= __exec_prefix__
export bindir							= __bindir__
export sbindir						= __sbindir__
export libexecdir					= __libexecdir__
export datarootdir				= __datarootdir__
export datadir						= __datadir__
export sysconfdir					= __sysconfdir__
export sharedstatedir			= __sharedstatedir__
export localstatedir			= __localstatedir__
export runstatedir				= __runstatedir__
export includedir					= __includedir__
export oldincludedir			= __oldincludedir__
export docdir							= __docdir__
export infodir						= __infodir__
export mandir							= __mandir__
export htmldir						= __htmldir__
export pdfdir							= __pdfdir__
export psdir							= __psdir__
export libdir							= __libdir__
export localedir					= __localedir__
# Derived directories
export tmpdir							= __tmpdir__
export tmpdir_persistent	= __tmpdir_persistent__
export statedir						= __statedir__
export cachedir						= __cachedir__
export logdir							= __logdir__
export spooldir						= __spooldir__
export lockdir						= __lockdir__
export desktopdir					= __desktopdir__
export icondir						= __icondir__
export metainfodir				=	__metainfodir__

##################################################
# Tools
##################################################
MAKE					= __MAKE__
ECHO					= __ECHO__
CHMOD					= __CHMOD__
CHOWN					= __CHOWN__
CP						= __CP__
RM						= __RM__
CAT						= __CAT__
MKDIR					= __MKDIR__
CUT						= __CUT__
TAIL					= __TAIL__
GREP					= __GREP__
GIT						= __GIT__
M4						= __M4__
M4_ENV_FLAGS	= __BUILD_TIME_ENV_M4_DEFINES__

##################################################
# Misc
##################################################
colon								= :
CONFIG_MACROSFILE		= __SIMBA_CONFIG_MACROSFILE__
CONFIG_MAKEFILE_IN	= __SIMBA_CONFIG_MAKEFILE_IN__
CONFIG_MAKEFILE			= __SIMBA_CONFIG_MAKEFILE__
export DOTENVFILE		= $(BUILDIR)/.env
ENVIRONMENT					= __BUILD_TIME_ENV__
export MODE					= __MODE__
LOADENV							= set -a; source $(DOTENVFILE)
VPATH =

##################################################
# Node
##################################################
NODE								= __NODE__
NPM									= __NPM__
NODE_BIN						= __NODE_BIN__
export NODE_ENV			= __NODE_ENV__
export NODE_OPTIONS = __NODE_OPTIONS__

##################################################
# Default target
##################################################
all: build

##################################################
# dev
##################################################
dev: start

start: start-warlocks-server start-warlocks-client
stop: stop-warlocks-server stop-warlocks-client

start-warlocks-server: build-warlocks-server
	$(LOADENV); $(NODE_BIN)/nodemon --watch $(SRCROOTDIR)/packages/server \
	--exec "(make build-warlocks-server && $(NODE) $(BUILDIR)/server/main.js | $(NODE_BIN)/pino-pretty -c) || exit 1" \
	> $(BUILDROOTDIR_ABS)/server.log 2>&1 & pid=$$!; \
	echo $$pid > $(BUILDROOTDIR_ABS)/server.pid

start-warlocks-client: build-warlocks-client
	$(LOADENV); cd $(SRCROOTDIR)/packages/client; \
	bash -c '$(NODE_BIN)/vite' > $(BUILDROOTDIR_ABS)/client.log 2>&1 & pid=$$!; \
	echo $$pid > $(BUILDROOTDIR_ABS)/client.pid

stop-warlocks-server:
	@if [[ -f server.pid ]]; then \
		kptree server.pid; \
		if [[ $$? -eq 0 ]]; then echo 'Killed warlocks-server'; else 'Failed to kill warlocks-server'; fi; \
	else \
		echo 'Warlocks-server not running!'; \
	fi

stop-warlocks-client:
	@if [[ -f client.pid ]]; then \
		kptree client.pid; \
		if [[ $$? -eq 0 ]]; then echo 'Killed warlocks-client'; else 'Failed to kill warlocks-client'; fi; \
	else \
		echo 'Warlocks-client not running!'; \
	fi

##################################################
# Build
##################################################
build: build-warlocks-server build-warlocks-client

build-warlocks-server: dotenv
	$(LOADENV); cd $(SRCROOTDIR)/packages/server && $(NODE) esbuild.build.js

build-warlocks-client: dotenv
	$(LOADENV); cd $(SRCROOTDIR)/packages/client && $(NODE) vite.build.js

##################################################
# Release
##################################################
release:

##################################################
# Distribute source tree
##################################################
dist: archive?=zip
dist: dist.$$(archive)

##################################################
# Distribute package
##################################################
package: archive?=zip
package: package.$$(archive)

##################################################
# Install
##################################################
install:

##################################################
# Uninstall
##################################################
uninstall:

##################################################
# Clean
##################################################
clean:
	-$(RM) -f *.log
	if [[ "$(BUILDROOTDIR_ABS)" != "$(BUILDIR_ABS)" ]]; then $(RM) -fr $(BUILDIR); fi

##################################################
# Distclean
##################################################
distclean: clean
	-$(RM) -f .#*
	-$(RM) -f config.*
	-$(RM) -f Makefile
	-$(RM) -fr node_modules
	-$(RM) -f package-lock.json

##################################################
# Environment
##################################################
dotenv: $(DOTENVFILE)

$(DOTENVFILE): $(CONFIG_MACROSFILE) | $(BUILDIR_ABS)
	$(ECHO) -e $(ENVIRONMENT) | sed -E "s#(.*)=\x27\x27#\1=\x27__\1__\x27#" | $(M4) $(CONFIG_MACROSFILE) - > $@

##################################################
# misc
##################################################
.DEFAULT:
	@if [ ! -f "$<" ]; then $(ECHO) "Missing file -> $${file:-$<}"; exit 1; fi

format:
	$(NODE_BIN)/prettier . --write

##################################################
# directories
##################################################
$(BUILDIR_ABS):
	$(MKDIR) -p $@ 2>/dev/null

##################################################
# help
##################################################
help:
	$(CAT) $(CONFIG_MAKEFILE)| $(GREP) -i --color=auto 'phony' | $(CUT) -d ' ' -f2- | $(TAIL) --lines=+3

# Software development
.PHONY: run # Read dotenvfile and run $target or tmp/scratch.js
.PHONY: dev # Develop application
.PHONY: build # Build application
.PHONY: test # Test application
# Software distribution
.PHONY: release # Create a new version
.PHONY: dist # Distribute source tree
.PHONY: package # Distribute build
# Software package
.PHONY: install # Install package
.PHONY: uninstall # Uninstall package
# Cleaning
.PHONY: clean # Remove files created by ./make
.PHONY: distclean # Remove files created by ./configure
# Misc
.PHONY: help # Display a short description about each Makefile target's function
.PHONY: dotenv # Write environment into .env
.PHONY: all # Default target
